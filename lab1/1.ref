/* Ординал - пара (ord коэффицент, те w * 3 = (ord 3))
   F0(x) = ((ord aF) + bF) * x + (ord cF) + dF

   Правила:
   n + (ord x) = (ord x)
   n * (ord x) = (ord x)
   (ord a) * ((ord b) + (ord c)) = (ord a) * (ord b) + (ord a) * (ord c)
   ((ord a) + x) * (ord b) = (ord b) * (ord b)
   ((ord a) + x) * ((ord b) + y) = (ord b) * (ord b) + (ord a*y) + x
*/

$ENTRY Go {
*    = <Solve './tests/1.txt' (1)>;
    = <Prout <OrdinalArithm (
        ('a'' + '(ord 'b'))' * '('c'' + '(ord 'd'))' * '('n'' + '(ord 't'))
      )>>;
}

Solve {
    e.File (s.Stream)
    , <Open 'r' s.Stream e.File> :
    , <ReadRules s.Stream ()> : e.Rules
    , <Prout Rules ': ' e.Rules> :
    , <CreateInts e.Rules> : = <Prout <Dg 'A'>'\n'<Dg 'B'>'\n'<Dg 'C'>>;
}

OrdinalArithm {
*    (e.Number1' * 'e.Number2) = (<Mul <Numb e.Number1> <Numb e.Number2>>);
*    (e.Number1' + 'e.Number2) = (<Add <Numb e.Number1> <Numb e.Number2>>);
    (e.Number' + '(ord e.K1)) = (ord e.K1);
    (e.Number' * '(ord e.K1)) = (ord e.K1);
    ((ord e.K1)' * 'e.B1) = (ord e.K1' * 'e.B1);
    ((ord e.K1)' * '(ord e.K2)) = ((ord e.K1)' * '(ord e.K2));
    (e.Mult1' * 'e.Mult2)
    , <OrdinalArithm e.Mult1> : {
        (e.Add1' + 'e.Add2) = <Prout e.Mult2><OrdinalArithm (e.Add1' * 'e.Mult2)>' + '<OrdinalArithm (e.Add2' * 'e.Mult2)>;
        e.NoAdd1
        , <OrdinalArithm e.Mult2> : {
            (e.Add3' + 'e.Add4) = <OrdinalArithm (e.Mult1' * 'e.Add3)>' + '<OrdinalArithm (e.Mult1' * 'e.Add4)>;
            e.NoAdd2 = (e.NoAdd1' * 'e.NoAdd2);
            };
     };
    ((ord e.K1)' * '(ord e.K2' + 'e.B2)) =
        (ord e.K1)' * '(ord e.K2)' + '
        <OrdinalArithm (ord e.K1)' * 'e.B2>;
    /*
    ((ord e.K1)' + 'e.B1)' * 'e.B2 = (ord e.K1' * 'e.B2);
    ((ord e.K1)' + 'e.B1)' * '(ord e.K2) = (ord e.K2)' * '(ord e.K2);
    ((ord e.K1)' + 'e.B1)' * '((ord e.K2)' + 'e.B2) =
        <OrdinalArithm ((ord e.K1)' + 'e.B1)' * '(ord e.K2)>' + '
        <OrdinalArithm ((ord e.K1)' + 'e.B1)' * 'e.B2>;
        */
}

CreateInts {
    s.F = <Prout s.F> <BuildFunc s.F>;
    s.F e.RestRules = <Prout s.F> <BuildFunc s.F> <CreateInts e.RestRules>;
}

BuildFunc {
    s.F = <Br s.F '=' '((ord a's.F') + b's.F') * x + (ord c's.F') + d's.F''>;
}

ReadRules {
    s.Stream (e.Rules)
    , <Get s.Stream> : e.Rule
    , e.Rule : {
        0 = e.Rules;
        e.NotNull = <ReadRules s.Stream (e.Rules e.Rule)>;
    }
}
