$ENTRY Go {
    , <Arg 1> : e.TestPath
    , <Arg 2> : e.SmtPath
    = <Solve (e.TestPath) (e.SmtPath) 1 (2)>;
}

Solve {
    (e.InFile) (e.OutFile) s.InStream (s.OutStream)
    , <Open 'r' s.InStream e.InFile> :
    , <Open 'w' s.OutStream e.OutFile> :
    , <ReadRules s.InStream () ()> : e.LeftRules' | 'e.RightRules
    , <CreateInts e.LeftRules ()> : e.LeftVars
    , <CreateInts e.RightRules ()> : e.RightVars
    , <ConcatenateVars (e.LeftVars) (e.RightVars)> : e.AllVars
    , <GenerateInEq (e.LeftRules) (e.RightRules) ()> : e.Inequations
    , <GenerateSMT ('('e.Inequations')') (e.AllVars) s.OutStream> :
    , <Close s.InStream> :
    , <Close s.OutStream> : = ;
}

/*
#####################################################################################

    Функции для генерации SMT2 файла (в контексте, что все требуемое уже подсчитано):
    GenerateSMT - вызывает в нужном порядке остальные функции
    SetLogic    - устанавливает логику
    DeclareFun  - объявляет коэффиценты, а также задает условие неотрицательности
    AssertFun   - накладывает условия на коэффиценты
    AssertInEq  - задает неравенства на коэффиценты
    CheckAndGet - проверка завершаемость и получение модели

#####################################################################################
*/

GenerateSMT {
    (e.Inequations) (e.AllVars) s.OutStream
     , <SetLogic s.OutStream> :
     , <DeclareFun ('('e.AllVars')') s.OutStream> :
     , <AssertFun (e.AllVars) s.OutStream> :
     , <AssertInEq (e.Inequations) s.OutStream> :
     , <CheckAndGet s.OutStream> : = ;
}

SetLogic {
   s.OutStream, <Putout s.OutStream '(set-logic QF_NIA)'> : =;
}

DeclareFun {
    (e.Arr) s.OutStream
    , <First (e.Arr)> : (e.FElem) e.RElem
    , e.FElem : {
        /* empty */ = ;
        e.NotEmpty
            , <Putout s.OutStream '(declare-fun 'e.FElem'() Int)'> :
            = <DeclareFun (e.RElem) s.OutStream>;
    };
}

AssertFun {
    ('b's.F' . a's.F' . d's.F' . c's.F' . 'e.Arr) s.OutStream
    = <Putout s.OutStream
    '(assert '
       '(and '
          '(or (> b's.F' 0) (> a's.F' 0) (> c's.F' 0) (> d's.F' 0)) '
          '(>= b's.F' 0) (>= a's.F' 0) (>= c's.F' 0) (>= d's.F' 0)'
        ')'
    ')'>
    <AssertFun (e.Arr) s.OutStream>;
    ('b's.F' . a's.F' . d's.F' . c's.F) s.OutStream
    = <Putout s.OutStream
    '(assert '
        '(and '
            '(or (> b's.F' 0) (> a's.F' 0) (> c's.F' 0) (> d's.F' 0)) '
            '(>= b's.F' 0) (>= a's.F' 0) (>= c's.F' 0) (>= d's.F' 0)'
         ')'
    ')'>;
    () s.OutStream = ;
}

AssertInEq {
    (e.Inequations) s.OutStream
    , <First (e.Inequations)> : (e.Ineq) e.Rest
    , e.Ineq : {
       /* empty */  = ;
       e.NotEmpty
       , <Putout s.OutStream '(assert 'e.Ineq')'> :
       = <AssertInEq (e.Rest) s.OutStream>;
    };
}

CheckAndGet {
    s.OutStream = <Putout s.OutStream '(check-sat)\n(get-model)'>;
}

/*
#####################################################################################

    Функции для генерации неравенств на коэффиценты:
    GenerateInEq    - проходит по всем парам (левая ч. -> правая ч.) и вызывает для
                      них функции композиции и генерации неравенств
    CalcFunc        - выполняет последовательное вычисление композиции функций
    ParseAnswer     - промежуточная функция для чтения данных в определенном формате
    GetInequalities - для пары (л.ч -> п.ч) строит неравенства
    GetInequality   - строит неравенства по коэффицентам при x и свободным

#####################################################################################
*/

GenerateInEq {
    (( )) (( )) (e.Res' . ') = e.Res;
    (((e.LeftRule)e.LeftRules)) (((e.RightRule)e.RightRules)) (e.Res)
    , <CalcFunc (e.LeftRule) ()> : e.CalculatedLeft
    , <CalcFunc (e.RightRule) ()> : e.CalculatedRight
    , <ParseAnswer (e.CalculatedLeft' | 'e.CalculatedRight)> : (e.Parsed)
        = <GenerateInEq ((e.LeftRules)) ((e.RightRules)) (e.Res e.Parsed' . ')>;
}

CalcFunc {
    (e.First s.Func2 s.Func1) ()
    , <Cp s.Func1> : e.Int1
    , <Cp s.Func2> : e.Int2
    , e.Int1 : '('e.X1' , 'e.Bias1')'
    , e.Int2 : '('e.X2' , 'e.Bias2')'
    ,'('
        <OrdinalRules e.X2' * 'e.X1>' , '<OrdinalRules <OrdinalRules e.X2' * 'e.Bias1>' + 'e.Bias2>
    ')' : e.Calculated = <CalcFunc (e.First) (e.Calculated)>;
    ( ) (e.Calculated) = e.Calculated;

    (s.Func) () = <Cp s.Func>;

    (s.Func) (e.Calculated)
    , <Cp s.Func> : e.Int
    , e.Int : '('e.X1' , 'e.Bias1')'
    , e.Calculated : '('e.X2' , 'e.Bias2')' =
    '('
        <OrdinalRules e.X1' * 'e.X2>' , '<OrdinalRules <OrdinalRules e.X1' * 'e.Bias2>' + 'e.Bias1>
    ')';

    (e.First s.Func) (e.Calculated)
    , <Cp s.Func> : e.Int
    , e.Int : '('e.X1' , 'e.Bias1')'
    , e.Calculated : '('e.X2' , 'e.Bias2')'
    , '('
        <OrdinalRules
            <OrdinalRules e.X1' * 'e.X2>' + '<OrdinalRules e.X1' * 'e.Bias2>>' , 'e.Bias1
    ')' : e.Calculated2 = <CalcFunc (e.First) (e.Calculated2)>;
}

ParseAnswer {
    (e.Left' | 'e.Right)
    = <GetInequalities ((e.Left) (e.Right))>;
}

GetInequalities {
    (('('e.LeftX' , 'e.LeftB')') ('('e.RightX' , 'e.RightB')'))
    =
    (<GetInequality ('>=') (e.LeftX) (e.RightX) ()>' . '
     <ToOneOR <GetInequality ('>') (e.LeftX) (e.RightX) ()>>' . '
     <GetInequality ('>=') (e.LeftB) (e.RightB) ()>);
}

GetInequality {
    (e.Op) () () (e.Res' . ') = e.Res;

    (e.Op) (e.Single) () (e.Res)
    , <First (e.Single)> : (e.SF) e.SR
    , e.SF : {
        /* empty */ = e.Res;
        e.NotEmpty = <GetInequality (e.Op) (e.SR) () ('(> 'e.SF' 0) . 'e.Res)>;
    };

    (e.Op) () (e.Single) (e.Res)
    , <First (e.Single)> : (e.SF) e.SR
    , e.SF : {
        /* empty */ = e.Res;
        e.NotEmpty = <GetInequality (e.Op) () (e.SR) ('(= 'e.SF' 0) . 'e.Res)>;
    };

    (e.Op) (e.LeftX) (e.RightX) (e.Res)
    , <First (e.LeftX)> : (e.LF) e.LR
    , <First (e.RightX)> : (e.RF) e.RR
    , e.LR : {
        /* empty */
        , e.RR : {
            /* empty */ = <GetInequality (e.Op) () () ('('e.Op' 'e.LF' 'e.RF') . 'e.Res)>;
            e.NotRREmpty1 = <GetInequality (e.Op) () (e.RR) ('('e.Op' 'e.LF' 'e.RF') . 'e.Res)>;
        };
        e.NotLREmpty = <GetInequality (e.Op) (e.LR) (e.RR) ('('e.Op' 'e.LF' 'e.RF') . 'e.Res)>;
    };

}

/*
#####################################################################################

    Вспомогательные функции:
    ToOneOr         - получает список условий и переводит его в одно OR условие
    FlatList        - "раскрывает список" (заменяет "." на " " с доп условием)
    First           - получает первый элемент в списке (во всем коде введен единый
                      формат разделения через ".")
    ConcatenateVars - используется лишь единожды, склеивает два списка (вероятно,
                      можно заменить средствами языка)

#####################################################################################
*/

ToOneOR {
    e.List = '(or '<FlatList e.List>')';
}

FlatList {
    e.Begin' . 'e.Rest
    , e.Begin : {
        '(= 'e.Some1')' = <FlatList e.Rest>;
        '(> 'e.Some2')' = e.Begin' '<FlatList e.Rest>;
    };
    e.NoDots = e.NoDots;
}

First {
    ('('e.Begin' . 'e.Rest) = (e.Begin)'('e.Rest;
    ('('e.Last')') = (e.Last);
    () = () ();
}

Last {
    (e.List)
    , <First (e.List)> : {
        (e.Last) = e.Last;
        (e.Begin) e.Rest = <Last (e.Rest)>;
    };
}

ConcatenateVars {
    (e.Arr1) (e.Arr2' . ') = e.Arr1 e.Arr2;
    (e.Arr1) () = e.Arr1;
}
/*
#####################################################################################

    Функции для работы с ординальной арифметикой:
    OrdinalRules   - основные правила, записанные в readme (вероятно, что некоторые
                     из них никогда и не вызываются)
    MultVectorCord - читы: умножает (w*a + b) на любой "ориднальный многочлен"
                     по заранее просчитанному правилу
    SimplifyAdd    - случай сложения с 0
    AddVector      - покомпонентное сложение (в идеале было бы написать через First)
    MultVectorW    - умножение на w справа
    Shift          - умножение на w слева

#####################################################################################
*/

OrdinalRules {
    'w * 'e.Vect = <Shift e.Vect>;
    e.Vect' * w' = <MultVectorW (e.Vect)>;
    '('e.v0' . 'e.v1') * ('e.Vect')' = <MultVectorCord ('('e.v0' . 'e.v1')') (e.Vect)>;
    '('e.v0' . 'e.v1') * 'e.Koef = '('e.v0' . (* 'e.v1' 'e.Koef'))';
    e.Vect1' + 'e.Vect2 = <AddVector (e.Vect1) (e.Vect2) ()>;
    e.Koef' * ('e.Vect')'
    , e.Vect : e.Begin' . 'e.Last = '(* e.Begin' 'e.Koef) . 'e.Last;
    e.Else = <Prout Not a rule e.Else'\n'> e.Else;
}

MultVectorCord {
    ('('e.v0' . 'e.v1')') (e.Vect)
    , <First ('('e.Vect')')> : (e.Koef) e.Rest
    , <Shift <Shift e.Rest>> : e.ShiftedRest
    , <OrdinalRules '('e.v0' . 'e.v1') * 'e.Koef> : e.MultKoef
    = <OrdinalRules e.ShiftedRest' + 'e.MultKoef>;
}

SimplifyAdd {
    '(+ 'e.Begin1' 'e.Begin2')'
    , e.Begin1 : {
        '0' = e.Begin2;
        e.Else1
        , e.Begin2 : {
            '0' = e.Begin1;
            e.Else2 = '(+ 'e.Begin1' 'e.Begin2')';
        };
    };
}

AddVector {
    ('('e.Begin1' . 'e.Rest1) ('('e.Begin2' . 'e.Rest2) ()
        = <AddVector (e.Rest1) (e.Rest2) (e.Begin2)>;
    (e.Begin1' . 'e.Rest1) (e.Begin2' . 'e.Rest2) (e.Res)
        = <AddVector (e.Rest1) (e.Rest2) (e.Res' . '<SimplifyAdd '(+ 'e.Begin1' 'e.Begin2')'>)>;
    (e.Begin1' . 'e.Rest1')') (e.Last2')') (e.Res)
        = '('e.Res' . '<SimplifyAdd '(+ 'e.Begin1' 'e.Last2')'>' . 'e.Rest1')';
    (e.Last1')') (e.Begin2' . 'e.Rest2')') (e.Res)
        = '('e.Res' . '<SimplifyAdd '(+ 'e.Last1' 'e.Begin2')'>' . 'e.Rest2')';
    (e.Last1')') (e.Last2')') (e.Res)
        = '('e.Res' . '<SimplifyAdd '(+ 'e.Last1' 'e.Last2')'>')';
    (e.1) (e.2) (e.Res) = <Prout no need for this line (e.Res)> e.Res;
}

MultVectorW {
    ('('e.First' . 'e.Body) = '(0 . 'e.Body;
}

Shift {
    '('e.Vect')' = '(0 . 'e.Vect')';
}

/*
#####################################################################################

    Функции для первичной обработки входных данных:
    CreateInts         - вызывает функцию построения интерполяции для каждой строки
                         на входе
    BuildFuncForString - вызывает функцию построения интерполяции для каждого символа
                         в строке
    BuildFunc          - строит интерполяцию для данного символа
    ReadRules          - читает и сохраняет входные данных

#####################################################################################
*/

CreateInts {
    ((e.Rule)e.RestRules) (e.Vars)
     , <BuildFuncForString (e.Rule) ()> : e.VarList
     = <CreateInts (e.RestRules) (e.Vars e.VarList)>;
    () (e.Vars) = e.Vars;
}

BuildFuncForString {
    (s.F e.RestChars) (e.AllVars)
    , <BuildFunc s.F> : {
        /* empty */ = <BuildFuncForString (e.RestChars) (e.AllVars)>;
        e.Vars = <BuildFuncForString (e.RestChars) (e.Vars' . 'e.AllVars)>;
    };
    ( ) (e.AllVars) = e.AllVars;

}

BuildFunc {
    s.F
    , <Cp s.F> : {
        /* empty */ = <Br s.F '=' '((b's.F' . a's.F') , (d's.F' . c's.F'))'>
                      'b's.F' . a's.F' . d's.F' . c's.F;
        e.Found = ;
    };
}

ReadRules {
    s.Stream (e.LeftRules) (e.RightRules)
    , <Get s.Stream> : {
        0 = (e.LeftRules)' | '(e.RightRules);
        e.LeftRule' -> 'e.RightRule = <ReadRules s.Stream (e.LeftRules (e.LeftRule)) (e.RightRules (e.RightRule))>
    };
}

