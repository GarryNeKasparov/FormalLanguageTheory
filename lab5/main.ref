*$FROM LibraryEx
$EXTERN Map;
*$FROM Set
$EXTERN Set-Create, Set-Insert, Set-Isin, Set-InsertList, Set-Get;
*$FROM List
$EXTERN List-Create, List-InitForEach, List-Rewrite, List-DropKey,
List-Append, List-AppendList, List-Get, List-ToJSON, List-Keys, List-WhereIn;

$ENTRY Go {
    , <Open 'r' 1 <Arg 1>> :
    , <ReadLines 1 ('#grammar')> : '#string\n'e.String
    , <ParseGrammar 1> : t.Grammar
    , <Close 1> :
    , <RemoveUseless t.Grammar> : t.Grammar^
    , <Open 'w' 1 <Arg 1>> :
    , <Putout 1 '#string\n'e.String'#grammar'> :
    , <ToJulia t.Grammar (G) (1) <List-Keys t.Grammar>> :
    , <Close 1> :
    , <Open 'w' 2 <Arg 2>> :
    , <ConstructFIRST t.Grammar> : t.FIRST
    , <ConstructFOLLOW t.Grammar> : t.FOLLOW
    , <ToJulia t.FOLLOW (S) (2) <List-Keys t.FOLLOW>> :
    = <Close 2>;
}

ToJulia_ {
    (s.Stream) (e.K) /*empty*/
    = ;
    (s.Stream) (e.K) (e.R)e.L
    , <Putout s.Stream e.K' ➡ 'e.R> :
    = <ToJulia_ (s.Stream) (e.K) e.L>;
}

ToJulia {
    t.List (s.mode) (s.Stream) /*empty*/
    = ;
    t.List (S) (s.Stream) (e.K)e.Keys
    , <List-Get t.List e.K> : (t.S)
    , <Set-Get t.S> : (e.L)
    , <ToJulia_ (s.Stream) (e.K) e.L> :
    = <ToJulia t.List (S) (s.Stream) e.Keys>;
    t.List (G) (s.Stream) (e.K)e.Keys
    , <List-Get t.List e.K> : e.L
    , <ToJulia_ (s.Stream) (e.K) e.L> :
    = <ToJulia t.List (G) (s.Stream) e.Keys>;
}

FindWithoutT_termsloop {
    e.T' 'e.TE
    , <IsNTerm e.T> : {
        True = True;
        False = <FindWithoutT_termsloop e.TE>;
    };
    e.T
    , <IsNTerm e.T> : {
        True = True;
        False = False;
    }
}

FindWithoutT_ruleloop {
    /*empty*/ = True;
    (e.Rule)e.Rules
    , <FindWithoutT_termsloop e.Rule> : {
        True = <FindWithoutT_ruleloop e.Rules>;
        False = False;
    }
}

FindWithoutT {
    t.Grammar t.Set /*empty*/
    = t.Set;
    t.Grammar t.Set (e.K)e.Keys
    , <List-Get t.Grammar e.K> : e.Rules
    , <FindWithoutT_ruleloop e.Rules> : {
        False = <FindWithoutT t.Grammar <Set-Insert t.Set e.K> e.Keys>;
        True = <FindWithoutT t.Grammar t.Set e.Keys>;
    }
}

RemoveUseless_termsloop {
    t.Set e.T' 'e.TE
    , <IsNTerm e.T> : {
        True
        , <Set-Isin t.Set e.T> : {
            True = True;
            False = <RemoveUseless_termsloop t.Set e.TE>;
        };
        False = <RemoveUseless_termsloop t.Set e.TE>;
    };
    t.Set e.T
    , <IsNTerm e.T> : {
        True
        , <Set-Isin t.Set e.T> : {
            True = True;
            False = False;
        };
        False = False;
    }
}

RemoveUseless_ruleloop {
    t.Set /*empty*/
    = False;
    t.Set (e.Rule)e.Rules
    , <RemoveUseless_termsloop t.Set e.Rule> : {
        True = True;
        False = <RemoveUseless_ruleloop t.Set e.Rules>;
    }
}

RemoveUseless_loop {
    t.Grammar t.Set /*empty*/
    = t.Set;
    t.Grammar t.Set (e.K)e.Keys
    , <List-Get t.Grammar e.K> : e.Rules
    , <RemoveUseless_ruleloop t.Set e.Rules> : {
        True = <RemoveUseless_loop t.Grammar <Set-Insert t.Set e.K> e.Keys>;
        False = <RemoveUseless_loop t.Grammar t.Set e.Keys>;
    };
}

RemoveUseless_ {
    t.Grammar t.Set
    , <FindWithoutT t.Grammar t.Set <List-Keys t.Grammar>> : t.Set^
    , <List-Keys t.Grammar> : e.Keys
    , <RemoveUseless_loop t.Grammar t.Set e.Keys> : {
        t.Set = t.Set;
        t.NewSet = <RemoveUseless_loop t.Grammar t.NewSet e.Keys>;
    }
}

RemoveUseless {
    t.Grammar
    , <Set-Create> : t.Set
    , <RemoveUseless_ t.Grammar t.Set> : t.Set^
    = <DropFromGrammar t.Grammar t.Set <List-Keys t.Grammar>>;
}

DropFromGrammar_termsloop {
    t.Set e.T' 'e.TE
    , <IsNTerm e.T> : {
        True
        , <Set-Isin t.Set e.T> : {
            True = <DropFromGrammar_termsloop t.Set e.TE>;
            False = False;
        };
        False = <DropFromGrammar_termsloop t.Set e.TE>;
    };
    t.Set e.T
    , <IsNTerm e.T> : {
        True
        , <Set-Isin t.Set e.T> : {
            True = True;
            False = False;
        };
        False = True;
    }
}

DropFromGrammar_ruleloop {
    t.Set /*empty*/
    = ;
    t.Set (e.Rule)e.Rules
    , <DropFromGrammar_termsloop t.Set e.Rule> : {
        True = (e.Rule)<DropFromGrammar_ruleloop t.Set e.Rules>;
        False = <DropFromGrammar_ruleloop t.Set e.Rules>;
    }
}

DropFromGrammar {
    t.Grammar t.Set /*empty*/
    = t.Grammar;
    t.Grammar t.Set (e.K)e.Keys
    , <List-Get t.Grammar e.K> : e.Rules
    , <DropFromGrammar_ruleloop t.Set e.Rules> : {
        /*empty*/ = <List-DropKey t.Grammar e.K>;
        e.Rules^ = <List-Rewrite t.Grammar (e.K) e.Rules>;
    } : t.Grammar^
    = <DropFromGrammar t.Grammar t.Set e.Keys>;
}

Split {
    (e.Delimeter) e.SB' 'e.Delimeter' 'e.SE
    = (e.SB)<Split (e.Delimeter) e.SE>;
    (e.Delimeter) e.S
    = (e.S);

}

ParseGrammar_ {
    t.List s.Stream
    , <Get s.Stream> : {
        0 = t.List;
        e.T' ➡ 'e.Rule 0 = <List-AppendList t.List (e.T) <Split ('|') e.Rule>>;
        e.T' ➡ 'e.Rule = <ParseGrammar_ <List-AppendList t.List (e.T) <Split ('|') e.Rule>> s.Stream>;
    }
}

ParseGrammar {
    s.Stream
    , <List-Create> : t.List
    = <ParseGrammar_ t.List s.Stream>;
}

Drop {
    /*empty*/ (e.T)
    = ;
    (e.T' 'e.TE)e.Rules (e.T)
    = <Drop e.Rules (e.T)>;
    (e.Rule)e.Rules (e.T)
    = (e.Rule)<Drop e.Rules (e.T)>;

}

FIRST {
    t.Grammar e.T' 'e.TE
    , <IsNTerm e.T> : {
        True
        , <List-Get t.Grammar e.T> : e.Rules
        , <Drop e.Rules (e.T)> : e.Rules^
        = <Map {
            (e.Rule) = <FIRST t.Grammar e.Rule>;
            } e.Rules>;
        False = (e.T)
    };
    t.Grammar e.T
    , <IsNTerm e.T> : {
        True
        , <List-Get t.Grammar e.T> : e.Rules
        , <Drop e.Rules (e.T)> : e.Rules^
        = <Map {
            (e.Rule) = <FIRST t.Grammar e.Rule>;
            } e.Rules>;
        False = (e.T);
    }
}


FIRST_rulesloop {
    t.Grammar t.Set /*empty*/
    = t.Set;
    t.Grammar t.Set (e.Rule)e.Rules
    , <Set-InsertList t.Set <FIRST t.Grammar e.Rule>> : t.Set^
    = <FIRST_rulesloop t.Grammar t.Set e.Rules>;
}

FIRST_loop {
    t.Grammar t.FIRST /*empty*/
    , <Dg 'changed'> : {
        'True' = <Br 'changed=False'><FIRST_loop t.Grammar t.FIRST <List-Keys t.Grammar>>;
        'False' = t.FIRST;
    };
    t.Grammar t.FIRST (e.K)e.Keys
    , <List-Get t.Grammar e.K> : e.Rules
    , <List-Get t.FIRST e.K> : (t.Set)
    , <FIRST_rulesloop t.Grammar t.Set e.Rules> : {
        t.Set = t.Set;
        t.NewSet = <Br 'changed=True'>t.NewSet;
    } : t.Set^
    , <List-Rewrite t.FIRST (e.K) (t.Set)> : t.FIRST^
    = <FIRST_loop t.Grammar t.FIRST e.Keys>;
}

FIRST_InitList {
    t.FIRST /*empty*/
    = t.FIRST;
    t.FIRST (e.N)e.NT
    = <FIRST_InitList <List-Append t.FIRST (e.N) <Set-Create>> e.NT>;
}

ConstructFIRST {
    t.Grammar
    , <List-Create> : t.FIRST
    , <List-Keys t.Grammar> : e.NT
    , <FIRST_InitList t.FIRST e.NT> : t.FIRST^
    , <Br 'changed=False'> :
    = <FIRST_loop t.Grammar t.FIRST <List-Keys t.Grammar>>;

}


ContainsTerm {
    (e.T)
    = <ContainsTerm e.T>;
    e.T' 'e.TE
    , <IsNTerm e.T> : {
        True = <ContainsTerm e.TE>;
        False = True;
    };
    e.T
    , <IsNTerm e.T> : {
        True = False;
        False = True;
    };
}

Eq {
    e.E (e.E) = True;
    e.E (e.S) = False;
}

OR {
    (False) False = False;
    e.E = True;
}

FOLLOW_ruleloop {
    t.Grammar t.FOLLOW (e.K) /*empty*/
    = t.FOLLOW;
    t.Grammar t.FOLLOW (e.K) e.X
    , e.X : {
        e.B' 'e.XE = e.B(e.XE);
        e.B = e.B();
    } : e.X^(e.XE)
    , <IsNTerm e.X> : {
        False = <FOLLOW_ruleloop t.Grammar t.FOLLOW (e.K) e.XE>;
        True
        , <List-Get t.FOLLOW e.X> : (t.XF)
        , t.XF : t.XFC
        , <FIRST t.Grammar e.XE> : e.FST
        , <Set-InsertList t.XF e.FST> : t.XF^
        , <OR (<ContainsTerm e.FST>) <Eq e.FST ()>> : {
            True
            , <List-Get t.FOLLOW e.K> : (t.KF)
            , <Set-Get t.KF> : (e.KF)
            = <Set-InsertList t.XF e.KF>;
            False
            = t.XF;
        } : t.XF^
        , t.XF : {
            t.XFC = <FOLLOW_ruleloop t.Grammar t.FOLLOW (e.K) e.XE>;
            t.NXF
            , <Br 'changed=True'> :
            , <List-Rewrite t.FOLLOW (e.X) (t.NXF)> : t.FOLLOW^
            = <FOLLOW_ruleloop t.Grammar t.FOLLOW (e.K) e.XE>;
        }
    }
}

FOLLOW_rulesloop {
    t.Grammar t.FOLLOW (e.K) /*empty*/
    = t.FOLLOW;
    t.Grammar t.FOLLOW (e.K) (e.Rule)e.Rules
    , <FOLLOW_ruleloop t.Grammar t.FOLLOW (e.K) e.Rule> : t.FOLLOW^
    = <FOLLOW_rulesloop t.Grammar t.FOLLOW (e.K) e.Rules>;
}

FOLLOW_loop {
    t.Grammar t.FOLLOW /*empty*/
    , <Dg 'changed'> : {
        'False' = t.FOLLOW;
        'True' = <Br 'changed=False'><FOLLOW_loop t.Grammar t.FOLLOW <List-Keys t.Grammar>>;
    };
    t.Grammar t.FOLLOW (e.K)e.Keys
    , <List-Get t.Grammar e.K> : e.Rules
    , <FOLLOW_rulesloop t.Grammar t.FOLLOW (e.K) e.Rules> : t.FOLLOW^
    = <FOLLOW_loop t.Grammar t.FOLLOW e.Keys>;
}

FOLLOW_InitList {
    t.FOLLOW /*empty*/
    = t.FOLLOW;
    t.FOLLOW (e.S) (e.S)e.NT
    , <Set-Create> : t.Set
    , <Set-Insert t.Set 'Δ'> : t.Set^
    = <FOLLOW_InitList <List-Append t.FOLLOW (e.S) t.Set> e.NT>;
    t.FOLLOW (e.N)e.NT
    = <FOLLOW_InitList <List-Append t.FOLLOW (e.N) <Set-Create>> e.NT>;
}

ConstructFOLLOW {
    t.Grammar
    , <List-Create> : t.FOLLOW
    , <List-Keys t.Grammar> : (e.S)e.NT
    , <FOLLOW_InitList t.FOLLOW (e.S) (e.S)e.NT> : t.FOLLOW^
    , <Br 'changed=False'> :
    = <FOLLOW_loop t.Grammar t.FOLLOW (e.S)e.NT>;
}

IsNTerm {
    s.A
    , <Compare (<Ord s.A>) <Ord 'Z'>> : {
        '-'
        , <Compare (<Ord s.A>) <Ord 'A'>> : {
            '-' = False;
            s.E = True;
        };
        s.E = False;
    };
    e.T = True; /*S''''...'*/
}

ReadLines {
    s.Stream (e.Stop)
    , <Get s.Stream> : {
        e.Line 0 = e.Line;
        e.Stop = ;
        e.Line = e.Line'\n'<ReadLines s.Stream (e.Stop)>;
    }
}